# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .data_connector_py3 import DataConnector


class TiTaxiiDataConnector(DataConnector):
    """Represents threat intelligence taxii data connector.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    :param workspace_id: The workspace id.
    :type workspace_id: str
    :param friendly_name: The friendly name for taxii client connector.
    :type friendly_name: str
    :param taxii_server: The API root server for taxii client.
    :type taxii_server: str
    :param collection_id: The taxii collection id.
    :type collection_id: str
    :param user_name: The taxii server user name.
    :type user_name: str
    :param password: The taxii server password.
    :type password: str
    :param data_types: The available data types for the connector.
    :type data_types: ~securityinsights.models.TiTaxiiDataConnectorDataTypes
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'workspace_id': {'key': 'properties.workspaceId', 'type': 'str'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'taxii_server': {'key': 'properties.taxiiServer', 'type': 'str'},
        'collection_id': {'key': 'properties.collectionId', 'type': 'str'},
        'user_name': {'key': 'properties.userName', 'type': 'str'},
        'password': {'key': 'properties.password', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'TiTaxiiDataConnectorDataTypes'},
    }

    def __init__(self, *, etag: str=None, tenant_id: str=None, workspace_id: str=None, friendly_name: str=None, taxii_server: str=None, collection_id: str=None, user_name: str=None, password: str=None, data_types=None, **kwargs) -> None:
        super(TiTaxiiDataConnector, self).__init__(etag=etag, **kwargs)
        self.tenant_id = tenant_id
        self.workspace_id = workspace_id
        self.friendly_name = friendly_name
        self.taxii_server = taxii_server
        self.collection_id = collection_id
        self.user_name = user_name
        self.password = password
        self.data_types = data_types
        self.kind = 'ThreatIntelligenceTaxii'
